{
    "version": 3,
    "sources": [
        "reportWebVitals.js",
        "customer/calendar.js",
        "customer/weatherWidget.js",
        "index.js"
    ],
    "names": [
        "reportWebVitals",
        "onPerfEntry",
        "Function",
        "then",
        "getCLS",
        "getFID",
        "getFCP",
        "getLCP",
        "getTTFB",
        "CalendarComponent",
        "gregorianToday",
        "utils",
        "getToday",
        "useState",
        "selectedDay",
        "setSelectedDay",
        "myVariable",
        "datePicked",
        "date",
        "String",
        "month",
        "day",
        "year",
        "Container",
        "id",
        "className",
        "value",
        "onChange",
        "calendarClassName",
        "shouldHighlightWeekends",
        "type",
        "name",
        "readOnly",
        "WeatherWidget",
        "useOpenWeather",
        "key",
        "lat",
        "lon",
        "lang",
        "unit",
        "data",
        "isLoading",
        "errorMessage",
        "console",
        "log",
        "current",
        "description",
        "locationLabel",
        "unitsLabels",
        "temperature",
        "windSpeed",
        "showForecast",
        "calendarWidget",
        "document",
        "getElementById",
        "weatherWidget",
        "ReactDOM",
        "render"
    ],
    "mappings": "8KAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,oCCFP,SAASQ,IACZ,IAAMC,EAAiBC,kBAAQC,WAC/B,EAAsCC,mBAASH,GAA/C,mBAAOI,EAAP,KAAoBC,EAApB,KACMC,EAAY,CAChBC,WAAaH,GAEXI,EAAOC,OAAOL,EAAYM,MAAM,IAAIN,EAAYO,IAAI,IAAIP,EAAYQ,MACxE,OAAiB,MAAbR,EAGA,mCACA,eAACS,EAAA,EAAD,CAAWC,GAAK,iBAAhB,UACE,qBAAKC,UAAY,oBAAjB,SACE,cAAC,WAAD,CACAC,MAAOZ,EACPa,SAAUZ,EACVa,kBAAoB,sBACpBC,yBAAuB,MAGzB,sBAAKJ,UAAY,eAAjB,UACE,oBAAGD,GAAG,cAAN,UAAqBR,EAAWC,WAAWG,MAA3C,IAAmDJ,EAAWC,WAAWI,IAAzE,IAA+EL,EAAWC,WAAWK,QACrG,uBAAOQ,KAAK,OAAOC,KAAO,eAAeP,GAAK,eAAeE,MAAOR,EAAMc,UAAQ,YAQxF,mCACE,8BACE,uE,oBCpCH,SAASC,IACd,MAA0CC,yBAAe,CACrDC,IAAK,mCACLC,IAAK,YACLC,IAAK,aACLC,KAAM,KACNC,KAAM,aALFC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,UAAWC,EAAzB,EAAyBA,aAUzB,OAHY,MAARF,GACFG,QAAQC,IAAI,wBAAwBJ,EAAKK,QAAQC,aAExC,MAARN,EAEC,sBAAKf,UAAY,mBAAjB,UACE,cAAC,IAAD,CACEgB,UAAWA,EACXC,aAAcA,EACdF,KAAMA,EACNF,KAAK,KACLS,cAAc,cACdC,YAAa,CAAEC,YAAa,IAAKC,UAAW,OAC5CC,cAAY,IAEd,qBAAK3B,GAAK,mBAAV,SACE,6BAAKgB,EAAKK,QAAQC,mBAOtB,8BACE,8CCpBR,IAAIM,EAAiBC,SAASC,eAAe,mBACzCC,EAAgBF,SAASC,eAAe,kBACxCF,GACFI,IAASC,OAAO,cAAChD,EAAD,IAAqB4C,SAASC,eAAe,oBAE3DC,GACFC,IAASC,OAAO,cAACxB,EAAD,IAAkBoB,SAASC,eAAe,mBAK5DtD,M",
    "file": "static/js/main.0b138470.chunk.js",
    "sourcesContent": [
        "const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n",
        "import React, {useState} from 'react';\nimport \"react-modern-calendar-datepicker/lib/DatePicker.css\";\nimport { Calendar } from \"react-modern-calendar-datepicker\";\nimport Container from 'react-bootstrap/Container'\nimport { utils } from 'react-modern-calendar-datepicker';\nexport function CalendarComponent(){\n    const gregorianToday = utils().getToday(); //This will set the current day\n    const [selectedDay, setSelectedDay] = useState(gregorianToday);//set the state to be the current date\n    const myVariable ={\n      datePicked : selectedDay\n    };\n    let date = String(selectedDay.month+\"/\"+selectedDay.day+\"/\"+selectedDay.year)\n    if (selectedDay!=null){//This will only execute if and only if the day is not null \n    //   console.log(\"This is the date picked: \"+myVariable.datePicked.day)\n      return(\n        <>\n        <Container id = \"calendarWidget\">  \n          <div className = \"calendar-wrapper \">\n            <Calendar\n            value={selectedDay}\n            onChange={setSelectedDay}\n            calendarClassName = \"responsive-calendar\"\n            shouldHighlightWeekends\n          />\n          </div>\n          <div className = \"date-wrapper\">\n            <p id=\"date_picked\">{myVariable.datePicked.month}/{myVariable.datePicked.day}/{myVariable.datePicked.year}</p>\n            <input type=\"text\" name = \"dateSelected\" id = \"dateSelected\" value={date} readOnly/>\n          </div>\n        </Container>\n        </>\n      )\n    }\n    else{//if for some odd reason the calendar default date is empty then an error will be shown\n      return(\n      <>\n        <div>\n          <h1>An unexpected error has occurred.</h1>\n        </div>\n      </>\n    )\n    }\n}",
        "import ReactWeather, {useOpenWeather} from 'react-open-weather';\nexport function WeatherWidget(){\n  const { data, isLoading, errorMessage } = useOpenWeather({\n      key: '04b880df429434d7b1778907fa79b3ee',\n      lat: '40.905937',\n      lon: '-72.423036',\n      lang: 'en',\n      unit: 'imperial', // values are (metric, standard, imperial)\n    });\n  if (data != null){\n    console.log(\"This is the forecast \"+data.current.description)\n  } \n  if(data != null){\n    return (\n      <div className = \"wheather-wrapper\">\n        <ReactWeather\n          isLoading={isLoading}\n          errorMessage={errorMessage}\n          data={data}\n          lang=\"en\"\n          locationLabel=\"Southampton\"\n          unitsLabels={{ temperature: 'F', windSpeed: 'Mph' }}\n          showForecast\n        />\n        <div id = \"current-forecast\">\n          <h3>{data.current.description}</h3>\n        </div>    \n      </div>  \n    ); \n  }\n  else{\n    return(\n      <div>\n        <h1>Loading...</h1>\n      </div>\n    );\n  }\n};",
        "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {CalendarComponent} from './customer/calendar'\nimport {WeatherWidget} from './customer/weatherWidget'\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\nlet calendarWidget = document.getElementById(\"calendar-widget\");\nlet weatherWidget = document.getElementById(\"weather-widget\");\nif (calendarWidget){\n  ReactDOM.render(<CalendarComponent/>,document.getElementById('calendar-widget'));\n}\nif (weatherWidget){\n  ReactDOM.render(<WeatherWidget/>, document.getElementById('weather-widget'));\n}\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"
    ],
    "sourceRoot": ""
}